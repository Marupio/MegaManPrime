TODO
Need to clarify axis consuming and overlapping.  I think I have it so that position setters and velocity setters can overlap, which they cannot do.
IRigidBody notes:
// Name       Exclusive, RB Action
// Variable       Yes     Setter
// Derivative     Yes     Setter
// SecondDer      Yes     Additive   <--- This guy is messing things up
// Force          No      Additive
// Impulse        No      Additive

Ways to control RigidBody[2D]


A Set position (& velocity if smoothing)
B Set velocity
C 'Set' acceleration (we use force applying)
D Apply force
E Apply impulse

In any freedom (DOF) we can do only 1 from A, B, or C, in total and any number of D and E.
A(D,E) B(D,E) C(D,E)

At most, these classes will be working with two controllable variables (can be Vectors, depending on how many DOFs they control)

Refactoring Movement.Move to group init, project, update, project, all together

Still working on below.  I've changed template stuff to simplify things.  But didn't finish.
* [Project|Substitute][To|From]SubSpace in WorldSpace
    Working on this one now, it is getting ugly with templates, toolset, and now the subspace projection functions.
    I think I need to bring it all into one function.  Not initialiseVariables, project/substitute, Call control.Update, backsubstitute/project.
    Clean this up and make it pretty.
* Apply limits
* Apply changes to rigidBody

Remove all Min restrictions?
    They are not useful to 2D, 3D, and 1D can assume Max restriction is Negative also.
    But having Max and Min limits makes sense, and I can apply them anywhere.



Axis can change frequently
Axis source is more static

AxisMove(KVariableSet)

Axis
    1d
    1dr
    2d
    2dr
    3d
    3dr
    

I think we need to decouple control axes from movement axes


Movement: based on DOFs - no, based on RigidBody[2D] constraints
    WorldSpace - 2D, 3D
    Spatial movement - 1, 2, 3
    Rotations - 1, 2, 3

2D World
Spatial movement - 0, 1, 2 (axis aligned)
Rotations - 0, 1

3D World
Spatial movement - 0, 1, 2, 3 (axis aligned)
Rotations - 0, 1, 2, 3

WorldSpace

if (World.nAxes > Control.nAxes) {
    // Control needs an alignment axis, projection
}


Ways to interact with RigidBody or RigidBody2D


Total:
Float
NoControl
ControlledPosition
ControlledVelocity
ControlledForce
ImpulsePosition
ImpulseVelocity
ImpulseForce




NoControl
ControlledPosition
ControlledVelocity
ControlledForce
ImpulsePosition
ImpulseVelocity
ImpulseForce

float
Vector2
Vector3

Movement2D
    Has RigidBody2D
Movement3D
    Has RigidBody

Movement breaks it down to axis controlls

public abstract class Movement
nTranslationalAxes
nRotationalAxes

