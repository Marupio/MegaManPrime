#if DEFINES
DEBUG - for debug compile, extra checks and printouts
MULTITHREADING - when true, include Interlocked / Mutex and other multithreading protections


TODO
Brain dump
    Problems with DataModel.  When it comes to the actual data we have this:
        public L Data { get; set; }
    But DerivedData needs this instead:
        public L Data { get; }
        public void UpdateDerivedOn(IDerivedDataObject<L> target, ref L data);
    So we have a base data class that contains the data, no access.
    DataSources add get; set; and DerivedData adds get atd UpdateDeried... etc.


    You are implementing Derived data according to the new inheritence diagram


Check converting between KVariableEnum and int.  It's *=2 kind of thing, not +=1.
Check copy constructors, rationalise their usage.  Maybe I need DeepCopy and ShallowCopy?
    Add a cloning capability - deep copies everything, and gives it a new ID
Implement SimpleObjectRegistry
Do we have hierarchical naming / access?
    * KVariableLimits       "entityName.limits"
    * KVariablesExt<float>  "entityName.limits.max"
    * float                 "entityName.limits.max.Derivative"
Each one is an IObject?  That might be too much.  Limit it to the dataSet level, like I have.
Maybe formalize the SubIObject identifying and accessing... have I done this already?  Name concatenation!
Identify when an ObjectHeader is just the header, or when it contains the full object... or maybe this is completely unnecessary
Add DataTypeEnum KVariableLimit throughout
Verify behaviour of Trigger struct
Finish encapsulating data types into DataObjects and DataSet objects
Add file format read / write for all data bearing classes
Do I want parameterless constructor for wrapped DataObjects to create null data types... or allocated empty ones?  I think the latter.
Data Modelling
Game entities are each a DataRegistry

VariableWatch and Trigger patterns:
// DataSource<--Actor - VariableWatch pattern
//  DataSource is an IDataObject
//  Actor uses ObjectRegistry to find DataSource, holds reference
//  Actor calls a Data access function to check value
//  Reacts when approriate
// DataSource-->Actor - Trigger pattern
//  


BuildPipeline
Read up on Unity's built-in BuildPipeline: 
    https://docs.unity3d.com/Packages/com.unity.scriptablebuildpipeline@latest/index.html


Working on limits, controlFieldprofielmanger takes kvariables<t>, adds supplied limits to own limits, sends to controlfield?
Does he need to set the mask?  Add integral limits, maybe, to controlField
Rotation fixed to world / fixed to entity switch - get this into control / profile / wherever
Go through looking for improper use of Vector3 assignment instead of set.

List<KVariableEnum> generator from KVariableTypeSet
Limit application - detect vars with no limits
    - Create mask - List<KVariableEnum> from detected vars WITH limits
    - Apply limits to subset
If you set a class field to a static data from, say, KVariableTypeInfo, does it equal the actual instance, or copy it?
KVariableTypeSet ts = KVariableTypeInfo.None; ts += KVariableEnum.Derivative;  ... now does None have Derivative?

I'm starting to use frameCount as a up-to-date measure, need ITime access

Need to clarify axis consuming and overlapping.  I think I have it so that position setters and velocity setters can overlap, which they cannot do.
IRigidBody notes:
// Name       Exclusive, RB Action
// Variable       Yes     Setter
// Derivative     Yes     Setter
// SecondDer      Yes     Additive   <--- This guy is messing things up
// Force          No      Additive
// Impulse        No      Additive

Ways to control RigidBody[2D]


A Set position (& velocity if smoothing)
B Set velocity
C 'Set' acceleration (we use force applying)
D Apply force
E Apply impulse

In any freedom (DOF) we can do only 1 from A, B, or C, in total and any number of D and E.
A(D,E) B(D,E) C(D,E)

At most, these classes will be working with two controllable variables (can be Vectors, depending on how many DOFs they control)

Refactoring Movement.Move to group init, project, update, project, all together

Still working on below.  I've changed template stuff to simplify things.  But didn't finish.
* [Project|Substitute][To|From]SubSpace in WorldSpace
    Working on this one now, it is getting ugly with templates, toolset, and now the subspace projection functions.
    I think I need to bring it all into one function.  Not initialiseVariables, project/substitute, Call control.Update, backsubstitute/project.
    Clean this up and make it pretty.
* Apply limits
* Apply changes to rigidBody

Remove all Min restrictions?
    They are not useful to 2D, 3D, and 1D can assume Max restriction is Negative also.
    But having Max and Min limits makes sense, and I can apply them anywhere.

Data Model Classes:
IObject
ObjectHeader
IObjectRegistry
IDataObjectHeader
IDataObject<T>

public interface IObject
public interface IObjectRegistry : IObject
public interface IDataObjectHeader : IObject
public interface IDerivedDataObjectHeader : IDataObjectHeader
public interface IDataSetObjectHeader : IDataObjectHeader
public interface IDataObject<L> : IDataObjectHeader
public interface IDataSetObject<L, C> : IDataSetObjectHeader, IDataObject<L>
public interface IDerivedDataObject<L> : IDerivedDataObjectHeader

public class ObjectHeader : IObject
public class ObjectRegistry : ObjectHeader, IObjectRegistry
public class DataObjectHeader : ObjectHeader, IDataObjectHeader
public class DataSetObjectHeader : DataObjectHeader, IDataSetObjectHeader
public class DerivedDataObjectHeader : DataObjectHeader, IDerivedDataObjectHeader
public class ListDataObject<T> : DataSetObjectHeader, IDataSetObject<List<T>, T>
public class KVariablesDataObject<T> : DataSetObjectHeader , IDataSetObject<KVariables<T>, T>
public class KVariablesExtDataObject<T> : DataSetObjectHeader , IDataSetObject<KVariablesExt<T>, T>

public class GenericDataObject : DataObjectHeader, IDataObject<object>
public class TriggerDataObject : DataObjectHeader, IDataObject<Trigger> ...
public class TriggerListDataObject : ListDataObject<Trigger> ...
public class TriggerKVariablesDataObject : KVariablesDataObject<Trigger> ...
public class TriggerKVariablesExtDataObject : KVariablesExtDataObject<Trigger> ...
public class KVariableTypeSetDataObject : DataSetObjectHeader , IDataSetObject<KVariableTypeSet, bool>
public class SimpleDerivedDataObject : DataObjectHeader, IDerivedDataObjectHeader {

<<<<<<< HEAD
DerivedGenericDataObject
DerivedTriggerDataObject
DerivedTriggerListDataObject
DerivedTriggerKVariablesDataObject
DerivedTriggerKVariablesExtDataObject
DerivedKVariableTypeSetDataObject
DerivedSimpleDerivedDataObject

GenericDataObject
GenericDerivedDataObject
DerivedGenericDataObject
GenericDataDerivedObject

TriggerDataObject
TriggerDerivedDataObject
DerivedTriggerDataObject
TriggerDataDerivedObject

TriggerListDataObject
TriggerListDerivedDataObject
DerivedTriggerListDataObject
TriggerListDataDerivedObject

TriggerKVariablesDataObject
TriggerKVariablesDerivedDataObject
DerivedTriggerKVariablesDataObject
TriggerKVariablesDataDerivedObject

TriggerKVariablesExtDataObject
TriggerKVariablesExtDerivedDataObject
DerivedTriggerKVariablesExtDataObject
TriggerKVariablesExtDataDerivedObject

KVariableTypeSetDataObject
KVariableTypeSetDerivedDataObject
DerivedKVariableTypeSetDataObject
KVariableTypeSetDataDerivedObject

SimpleDerivedDataObject
SimpleDerivedDerivedDataObject
DerivedSimpleDerivedDataObject
SimpleDerivedDataDerivedObject









=======
>>>>>>> origin/main

IObject
|-ObjectHeader--------,
|-IObjectRegistry     |
|-IDataObjectHeader   |
| |-DataObjectHeader--'
  |-IDataSetObjectHeader
  

-IObjectRegistry
-IDataObjectHeader, IDataObject<T>
 -IDerived


TODO outline datamodel


Axis can change frequently
Axis source is more static

AxisMove(KVariableSet)

Axis
    1d
    1dr
    2d
    2dr
    3d
    3dr
    

I think we need to decouple control axes from movement axes


Movement: based on DOFs - no, based on RigidBody[2D] constraints
    WorldSpace - 2D, 3D
    Spatial movement - 1, 2, 3
    Rotations - 1, 2, 3

2D World
Spatial movement - 0, 1, 2 (axis aligned)
Rotations - 0, 1

3D World
Spatial movement - 0, 1, 2, 3 (axis aligned)
Rotations - 0, 1, 2, 3

WorldSpace

if (World.nAxes > Control.nAxes) {
    // Control needs an alignment axis, projection
}


Ways to interact with RigidBody or RigidBody2D


Total:
Float
NoControl
ControlledPosition
ControlledVelocity
ControlledForce
ImpulsePosition
ImpulseVelocity
ImpulseForce




NoControl
ControlledPosition
ControlledVelocity
ControlledForce
ImpulsePosition
ImpulseVelocity
ImpulseForce

float
Vector2
Vector3

Movement2D
    Has RigidBody2D
Movement3D
    Has RigidBody

Movement breaks it down to axis controlls

public abstract class Movement
nTranslationalAxes
nRotationalAxes

